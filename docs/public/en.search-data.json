{"/docs/":{"data":{"":"Welcome to the Srotas documentation. Below, you’ll find links to different sections to help you get started and explore advanced features.\nGettingStartedLearn how to install and set up Srotas for API testing. UsageUnderstand how to execute tests using Srotas, including CLI commands and workflow. ConfigurationExplore the YAML configuration options. ExampleCheck out practical examples showcasing different use cases of Srotas in action. ","expressions#Expressions":"Srotas uses Expr for dynamic evaluations in YAML configurations and CLI expressions.\nExpr provides a powerful yet simple syntax for defining expressions.\nTo learn more about the syntax and capabilities of Expr, refer to the official documentation:\nExpr Language Definition"},"title":"Docs"},"/docs/configuration/":{"data":{"":"","#":"Srotas can execute a YAML configuration file to facilitate API testing and workflow automation. The configuration consists of multiple sections that define how requests are executed, variables are managed, and outputs are handled.\nGlobal FieldsDefines global settings such as headers and environment variables that apply across all steps. VariablesCovers static and dynamic variables that store and manipulate data during execution. StepsDetails the different execution steps available, such as conditional logic, loops, and HTTP requests. OutputControls what data is returned after execution, supporting integration with chained executions. For a detailed breakdown of each section, refer to the respective documentation.\nSample Configuration base_url: \"https://api.example.com/v1\" steps: - type: http step: name: \"Fetch Users\" method: GET url: \"/api/users\" store: users: \"response.data\" - type: forEach step: name: \"Process Each User\" list: \"users\" as: \"user\" body: - type: http step: name: \"Fetch User Tasks\" method: GET url: \"/api/users/:user.id/tasks\" store: tasks: \"response.data\" - type: forEach step: name: \"Check Completed Tasks\" list: \"filter(tasks, {.status == 'completed'})\" as: \"task\" body: - type: http step: name: \"Update Task Status\" method: PATCH url: \"/api/tasks/:task.id\" body: status: \"reviewed\" Explanation Step 1: Fetch Users The first step makes a GET request to /api/users to retrieve a list of users. The response is stored in the users variable for later use.\nStep 2: Iterate Over Each User A forEach loop iterates over the users list. Each user is assigned to the user variable within the loop.\nStep 3: Fetch User Tasks For each user, another GET request is sent to /api/users/:user.id/tasks to fetch their assigned tasks. The response is stored in the tasks variable.\nStep 4: Iterate Over Completed Tasks Another forEach loop filters the tasks list to find those with status == 'completed'. Each matching task is assigned to the task variable.\nStep 5: Update Task Status For each completed task, a PATCH request is sent to /api/tasks/:task.id to update its status to reviewed."},"title":"Configuration"},"/docs/configuration/global-fields/":{"data":{"":"","#":"Version version: \"1.0\" Field Required Type Description version Yes String Configuration version identifier Description\nThe version field ensures compatibility and allows the framework to manage configuration parsing across different versions of Srotas. Currently, only “1.0” is supported.\nTip\nAlways specify the version. Future versions may introduce breaking changes.\nBase URL base_url: \"https://api.example.com/v1\" Field Required Type Description base_url No String Base URL for all HTTP requests Description\nThe base URL provides a common prefix for all HTTP requests in the configuration. If not specified, each HTTP step must use full URLs.\nWarning\nCannot contain dynamic expressions. Supports only static string.\nTip\nOptional, but recommended for consistent configurations.\nGlobal Headers headers: Accept: \"'application/json'\" Authorization: \"'Bearer ' + token\" X-Custom-Header: \"'static-value'\" Field Required Type Description headers No map\u003cstring,expr\u003e Global headers applied to all requests Description\nGlobal headers are applied to every HTTP request in the configuration. Each header is defined as a key-value pair, where the key is the header name, and the value is an expr expression. This allows headers to be dynamically generated using static variables or values.\nIf an HTTP step defines the same header as a global header, the HTTP step header takes precedence.\nGlobal headers can also be set using the --env and --header flags. Learn more in the Running a Configuration section.\nWarning\nUse single quotes for string literals in expressions: Accept: \"'application/json'\"\nWithout single quotes, application/json will be interpreted as a division operation.\nCaution\nGlobal headers are defined through the --env flag, --header flag, and the headers field in the configuration file. If a global header is defined multiple times across any of these, an error is raised.\nTimeout timeout: 10 Field Name Type Required Description timeout int No Maximum duration (in seconds) before an HTTP request times out. Defaults to 15 seconds if not specified. Description\nThe timeout field sets the maximum duration (in milliseconds) for all HTTP requests made during execution. If a request does not complete within this time, it will fail."},"title":"Global Fields"},"/docs/configuration/output/":{"data":{"":" output: processed_items: \"length(items)\" success_rate: \"processed_count / total_count * 100\" final_status: \"last_response.status\" Field Required Type Description output No map\u003cstring,expr\u003e Defines variables to be included in the final output output_all No bool If true, includes all variables in output, ignoring output field Description\nThe output section defines the final result of the configuration execution. It allows selecting specific variables to include in the output. The output field is a map where the key is the output name and the value is an expr expression that is evaluated at the end of execution. All variables available during execution can be used in these expressions.\nAdditionally, the output_all field can be used to include all available variables in the output. If output_all is set to true, the output field is ignored, and the entire execution context is added to the output data.\nThe output data is particularly useful when using the pipe (|) operator to chain multiple Srotas configurations. When output is piped, the next configuration execution reads it as static variables, effectively transferring the execution context between runs.\nNote\nOutput is generated only after the entire configuration has completed execution.\nWarning\nIf both output and output_all are provided, output_all takes precedence."},"title":"Output"},"/docs/configuration/steps/":{"data":{"":"","#":"Steps define the execution flow within a Srotas configuration. Each step represents an action or decision point, such as making an HTTP request, iterating over a list, or executing conditional logic.\nA step consists of the following fields:\nField Type Required Description type string Yes Defines the step type (e.g., http, if, while, forEach). step object Yes Contains step-specific configurations. step.name string Yes A descriptive name for the step. Step Types Srotas supports multiple step types, each serving a specific purpose:\nHTTP Step If Step ForEach step While Step Each step type has its own structure and fields, detailed in their respective sections.\nNote\nSteps execute sequentially unless modified by control structures like if, forEach, or while.\nNote\nVariables created in a step may be available to subsequent steps, depending on scope rules."},"title":"Steps"},"/docs/configuration/steps/foreach/":{"data":{"":" type: forEach step: name: \"Batch User Processing\" list: \"filter(users, {.status == 'pending'})\" as: \"user\" body: - type: http step: name: \"Process User\" method: POST url: \"/users/process\" body: file: \"request.json\" data: userId: \"user.id\" Field Type Required Description type string Yes Must be \"forEach\" name string Yes Descriptive name for the iteration step list expr Yes Expression that evaluates to a list as string Yes Variable name that stores the current item body list\u003cstep\u003e Yes Steps to execute for each item in the list Description\nForEach steps iterate over a dynamically generated list and execute a set of steps for each item in the list. The list field is an expr expression that must evaluate to a list. The as field is a string that defines the variable name used to reference the current item in each iteration.\nWarning\nThe variable defined in as is only available within the same steps."},"title":"Foreach"},"/docs/configuration/steps/http/":{"data":{"":"","#":"An HTTP step defines an API request with options for dynamic parameters, request body templating, and response validation.\ntype: http step: name: \"Fetch User Details\" method: GET url: \"/users/:user_id\" query_params: key: \"value\" headers: Custom-Header: \"'dynamic_value'\" body: file: \"request_template.json\" data: dynamic_field: \"computed_value\" store: user_data: \"response.user\" validations: status_code: 200 asserts: - \"response.status == 'online'\" Field Type Required Description type string Yes Must be \"http\" name string Yes Descriptive name for the step method string Yes HTTP method (GET, POST, etc.) url string Yes Request URL with optional path parameters headers map\u003cstring, list\u003cexpr\u003e\u003e No Request-specific headers query_params map\u003cstring, list\u003cexpr\u003e\u003e No URL query parameters delay int No Delays the HTTP request execution by the specified time (in ms) body.file string No JSON template file path body.template string No Inline JSON template body.data map\u003cstring, expr\u003e No Dynamic data for template store map\u003cstring, expr\u003e No Variables to extract from the response validations.status_code int No Expected HTTP status code validations.asserts list\u003cexpr\u003e No List of validation expressions URL Parameters Use /:variable in the URL to specify path parameters. These parameters are replaced with values from stored variables.\nFor example, if userId is a variable with the value 123, the following URL:\nurl: \"/users/:userId\" Will be transformed into: /users/123\nWarning\nexpr expressions are not allowed in URL parameters.\nCaution\nThe variable used in the parameter must already be defined; otherwise, an error will be raised.\nHeaders Defined as a map where the key is the header name and the value is a list of expr expression that evaluate to a string. All variables can be used in these expressions. Step headers are prioritized over global headers if a header with the same name exists.\nBody The request body can be defined using either a file or an inline template. If both are provided, the template takes precedence.\nBody Fields data:\nSpecifies the input for the template. Supports expr expressions for dynamic computation. All defined data fields are accessible within the template.\nfile:\nPath to an external file containing the request body template.\ntemplate:\nInline request body template. If provided, this is used instead of the file.\nImportant\nThe template for the body field should follow the Go text/template format.\nStore A map where the key is the variable name, and the value is an expr expression. The response variable holds the HTTP response body and can be used only within the same HTTP step.\nValidations status_code specifies the expected HTTP status code. asserts is a list of expr expressions that validate the response body. These expressions have access to all variables and the response variable and must return a boolean value. Note\nstore captures response data after the request completes.\nHTTP Request Template When it comes to defining the HTTP request body, Srotas uses Go’s built-in text/template syntax. This lets you create a template that mixes static JSON with dynamic data. You can define inline templates or reference external files, and you have full control over how the final JSON is generated.\nLearning Go Template Syntax\nIf you’re new to Go templates, follow these resources in order to get familiar with the syntax:\nNomad’s Go Template Syntax Guide – A beginner-friendly introduction with examples. Gomplate Syntax Documentation – Covers basic templating. Official Go text/template Documentation – The full reference for Go’s templating engine. By following these, you’ll quickly get up to speed with writing templates for Srotas."},"title":"HTTP Request"},"/docs/configuration/steps/if/":{"data":{"":" type: if step: name: \"Role-based Action\" condition: \"user.role == 'admin'\" then: - type: http step: name: \"Admin Action\" method: POST url: \"/admin/action\" else: - type: http step: name: \"User Action\" method: POST url: \"/user/action\" Field Type Required Description type string Yes Must be \"if\" name string Yes Descriptive name for the condition condition expr Yes Expression that evaluates to true or false then list\u003cstep\u003e Yes Steps to execute if condition is true else list\u003cstep\u003e No Steps to execute if condition is false Description\nConditional steps allow branching logic based on evaluated expressions. The condition field is an expr expression that must return a boolean value. If it evaluates to true, the steps in then execute; otherwise, the steps in else execute (if present).\nNote\nThe else block is optional."},"title":"If"},"/docs/configuration/steps/while/":{"data":{"":" type: while step: name: \"Job Status Monitoring\" init: attempts: \"0\" status: \"'pending'\" condition: \"status != 'completed' \u0026\u0026 attempts \u003c 10\" update: attempts: \"attempts + 1\" body: - type: http step: name: \"Check Status\" method: GET url: \"/jobs/:job_id\" store: status: \"response.status\" Field Type Required Description type string Yes Must be \"while\" name string Yes Descriptive name for the polling step init map\u003cstring,expr\u003e No Variables initialized before the loop starts condition expr Yes Expression that determines whether the loop continues update map\u003cstring,expr\u003e No Variables updated after each iteration body list\u003cstep\u003e Yes Steps to execute while the condition is true Description\nWhile steps repeatedly execute a set of steps until a condition evaluates to false. The init field is a map where the key is the variable name and the value is an expr expression. These variables are initialized before the loop starts and are only available within the same while step.\nThe condition field is an expr expression that determines whether the loop should continue execution and must evaluate to a boolean value. It is evaluated after each iteration.\nThe update field is also a map where the key is the variable name and the value is an expr expression. It can reference all available variables, including the ones defined in init. The update expressions is evaluated after each iteration.\nWarning\nThe init field defines variables that exist only within the while step. Any modifications to init variables are lost outside the while step since they are scoped only to that step.\nTip\nTo ensure values does not persist beyond the while step, only init variables should be used within update instead of creating new ones unintentionally. Variables created in update persist globally, but modifications to init variables do not."},"title":"While"},"/docs/configuration/variables/":{"data":{"":"","#":"Variables are categorized as static or dynamic based on whether other variables are available when evaluating their values. However, during execution, there is no difference between them, all variables function the same way.\nStatic Variables Static variables are initialized before execution and cannot access other variables for value evaluation. They support expressions but without variable references. The key represents the variable name, and the value is an expr expression that determines its initial value. These variables can be used throughout the configuration, including in global headers, and their values can be modified during execution.\nvariables: api_key: \"'secret-token-123'\" environment: \"'staging'\" max_retries: \"3\" allowed_statuses: \"['active', 'pending']\" Field Required Type Description variables No map\u003cstring,expr\u003e Variables initialized before execution Static varibles can also be defined using the --env and --var flags. Learn more in the Running a Configuration section.\nCaution\nStatic variables are defined through the --env flag, --var flag, and the variables field in the configuration file. If a static variable is defined multiple times across any of these, an error is raised.\nDynamic Variables Dynamic variables are created and updated as the configuration runs, allowing data to be stored and passed between steps. They can reference other variables and are typically set within different steps.\nThese variables are mostly created using the store field of an HTTP step and are globally available. Additionally, variables created in the update field of a while step, if they are not part of the init field, also persist globally, but is not recommended.\nHowever, variables created in other step-specific fields, such as the init field of a while step or the as field of a forEach step, are only available within the scope of that step and do not persist globally.\nWarning\nUnlike static variables, which cannot be redefined, dynamic variables can be updated. If a dynamic variable already exists, its value is overwritten; otherwise, a new one is created. Static variables also become dynamic during execution."},"title":"Variables"},"/docs/examples/":{"data":{"":"","device-connectivity-check#Device Connectivity Check":"This configuration pings a list of device IP addresses to check connectivity. Each device is pinged individually using a forEach loop.\nversion: \"1.0\" base_url: \"http://devices.local\" variables: device_ips: \"['192.168.1.10', '192.168.1.20', '192.168.1.30']\" steps: - type: forEach step: name: \"Check Device Connectivity\" list: \"device_ips\" as: \"ip\" body: - type: http step: name: \"Ping Device\" method: GET url: \"/ping/:ip\" store: status: \"response.status\" validations: status_code: 200 output: connectivity_status: \"status\" Step 1 A forEach loop iterates over the list of device IP addresses defined in device_ips. For each device, an HTTP GET request is sent to the /ping/:ip endpoint (with :ip replaced by the current IP). The response status is stored in status and later output as connectivity_status.","real-time-order-status-polling#Real-Time Order Status Polling":"This example demonstrates real-time polling: it first initiates order processing, then uses a while loop to repeatedly check the order status until it is completed (or until a maximum number of attempts is reached).\nversion: \"1.0\" base_url: \"https://api.orders.com\" variables: order_id: \"'12345'\" steps: - type: http step: name: \"Initiate Order Processing\" method: POST url: \"/orders/process\" body: file: \"order_request.json\" store: order_status: \"response.status\" validations: status_code: 200 - type: while step: name: \"Monitor Order Status\" init: attempts: \"0\" condition: \"order_status != 'completed' \u0026\u0026 attempts \u003c 10\" update: attempts: \"attempts + 1\" body: - type: http step: name: \"Check Order Status\" method: GET url: \"/orders/:order_id/status\" store: order_status: \"response.status\" validations: status_code: 200 output: final_order_status: \"order_status\" Step 1 The configuration begins by initiating order processing with a POST request. It uses a JSON template from order_request.json and stores the initial order status in order_status.\nStep 2 A while loop monitors the order status. The loop initializes with attempts set to 0. It repeatedly sends a GET request to /orders/:order_id/status (with :order_id replaced by the value from the static variable) until the order status becomes \"completed\" or 10 attempts have been made. The final status is then output as final_order_status.","weather-api-check#Weather API Check":"This configuration retrieves the current weather for a specified city from a weather API. The response is stored and then output as the current weather.\nversion: \"1.0\" base_url: \"https://api.weatherapi.com\" steps: - type: http step: name: \"Fetch Weather Data\" method: GET url: \"/v1/current.json\" query_params: key: API_KEY q: city store: weather: \"response.current\" validations: status_code: 200 output: current_weather: \"weather\" The city and API_KEY variables are provided using the –var flag, making it easy to reuse the same configuration for different cities.\nStep 1 The configuration sends a GET request to fetch weather data for city. The city and API_KEY variables are added to the query_params field, ensuring they are included as query parameters in the request. For example, if API_KEY = 'abc' and city = 'def', the final URL will be /v1/current.json?key=abc\u0026q=def. The response’s current weather conditions are stored in the weather variable and output as current_weather."},"title":"Examples"},"/docs/getting-started/":{"data":{"":"Srotas is a command-line tool for testing APIs using YAML configuration files. This guide will help you get started quickly.","installation#Installation":"To install Srotas, visit the GitHub Releases page and download the latest release for your platform. Follow the installation instructions provided.","running-a-configuration#Running a Configuration":"Once installed, you can run a Srotas configuration file using:\nsrotas run config.yaml Common Flags -D, --debug : Enables debug mode for detailed logs. -E, --env \u003cfile or JSON\u003e : Loads global headers and variables. -H, --header \u003ckey:value\u003e : Adds an additional global header. -V, --var \u003cname=value\u003e : Defines a global variable. Example Usage Run a configuration with debug mode:\nsrotas run config.yaml -D Load variables and headers from a JSON file:\nsrotas run config.yaml -E env.json Pass headers dynamically:\nsrotas run config.yaml -H \"Authorization: 'Bearer ' + token\" Define variables inline:\nsrotas run config.yaml -V \"username=example\" Chaining Configurations with Piping Srotas allows piping outputs between executions:\nsrotas run fetch_users.yaml | srotas run process_tasks.yaml This allows the output of the first configuration to be used as static variables in the second.\nFor more advanced usage, check out the Detailed Usage Guide."},"title":"Getting Started"},"/docs/usage/":{"data":{"":"Srotas is a command-line tool for testing APIs using YAML configuration files. To get started quickly refer Getting Started.","running-a-configuration#Running a Configuration":"Use the run command to execute a configuration file:\nsrotas run config.yaml To learn more about running a configuration, see the Running Srotas Configurations.\nFor more details on configuring Srotas, check out the Configuration Guide."},"title":"Usage"},"/docs/usage/http-req-command/":{"data":{"":"The http command in Srotas allows users to send a single HTTP request without requiring a configuration file. It is intended for quick, ad-hoc requests rather than extensive usage. This command is useful when testing an API endpoint or making a one-time request after running a configuration.","flags-and-options#Flags and Options":"Query Parameters Usage\nsrotas http GET https://api.example.com/users --query \"key=value\" srotas http GET https://api.example.com/users -Q \"key=value\" Format\nkey=value Multiple query parameters can be specified using multiple --query flags or by separating them with a comma. Example\nsrotas http GET https://api.example.com/users --query \"status=active\" --query \"role=admin\" Headers Usage\nsrotas http GET https://api.example.com/users --headers \"key:value\" srotas http GET https://api.example.com/users -H \"key:value\" Format\nkey:value Multiple headers can be specified using multiple --headers flags. Example\nsrotas http GET https://api.example.com/users --headers \"Authorization: Bearer abc123\" --headers \"X-Correlation-ID: 12345\" Request Body Usage\nsrotas http POST https://api.example.com/users --body '{\"name\": \"John Doe\"}' srotas http POST https://api.example.com/users -B '{\"name\": \"John Doe\"}' Format\nA JSON-formatted string. Example\nsrotas http POST https://api.example.com/users --body '{\"name\": \"Alice\", \"email\": \"alice@example.com\"}' --headers \"Content-Type: application/json\" Warning\nThe http command does not support expressions (expr). Only static values can be used.\nNote\nIt is not designed for heavy usage or complex workflows. Best used for quick testing of API endpoints or making a one-off request after running a configuration.","usage#Usage":" srotas http [METHOD] [URL] [flags] METHOD: The HTTP method to use (e.g., GET, POST, PUT, DELETE). URL: The endpoint to send the request to. For a complete list of available flags and usage details, run:\nsrotas http --help Example srotas http GET https://api.example.com/users "},"title":"Send Http Request"},"/docs/usage/run-command/":{"data":{"":"","chaining-configurations#Chaining Configurations":"Srotas supports piping output between executions:\nsrotas run fetch_users.yaml | srotas run process_tasks.yaml This transfers the execution context from the first configuration to the second. Only the specified output will be transfered.","flags-and-options#Flags and Options":"Debug Mode Enable detailed logs:\nsrotas run config.yaml --debug Alias:\nsrotas run config.yaml -D Environment The --env flag is used to load global headers and static variables from a JSON string or a file containing JSON data.\nUsage\nsrotas run config.yaml --env env.json Alias:\nsrotas run config.yaml -E env.json Format\nThe JSON structure consists of two fields:\nVariables: A map where keys are variable names and values are expressions. These variables are static, meaning they do not have access to other values at the time of definition. Headers: A map where keys are header names and values are lists of expressions. The expressions for headers can reference static variables. You can provide the JSON data directly as a string or specify a file path containing the JSON.\n{ \"Variables\": { \"auth_token\": \"'Bearer abc123'\" }, \"Headers\": { \"Authorization\": [\"auth_token\"], \"X-Request-ID\": [\"uuid()\"] } } Example\nsrotas run --env '{\"Variables\":{\"user\":\"John Doe\",\"token\":\"ey1234\"},\"Headers\":{\"Authorization\":[\"\\\"Bearer \\\" + token\"]}}' config.yaml srotas run --env env.json config.yaml Important\nAt least one of Variables or Headers must be present in the JSON.\nWarning\nDuplicate variable and header names will result in an error.\nFor more details, refer global fields.\nHeaders The --header flag is used to define global headers dynamically when running a Srotas configuration. Headers specified using this flag override any global headers defined in the configuration file.\nUsage\nsrotas run --header \"key1:'value1'\" --header \"key2: 'value2'\" config.yaml Alias:\nsrotas run -H \"key1:'value1'\" -H \"key2: 'value2'\" config.yaml Format\nThe --header flag follows the format:\n\"key:value\" key: The name of the header. value: An expression that evaluates to a string. It has access to all static variables. Multiple headers can be specified by using the flag multiple times.\nExamples\nDefine an Authorization header dynamically:\nsrotas run --header \"Authorization: 'Bearer $TOKEN'\" config.yaml Tip\nThis flag is useful when adding authentication headers dynamically instead of modifying the configuration file.\nWarning\nMultiple headers with the same name cannot be defined globally (in --header, --env, or the config file). If a duplicate header is defined, an error is raised.\nNote\nHeaders specified using --header take precedence over those defined in --env and the configuration file.\nFor more details, refer global headers.\nVariables The --var flag in Srotas allows users to define global variables directly through the command line. It is useful for setting static values that can be referenced within the configuration file.\nUsage\nsrotas run --var key1=value1 --var key2=value2 config.yaml Alias:\nsrotas run -V key1=value1 -V key2=value2 config.yaml Format\nEach --var flag must follow the format:\nkey=value key: The name of the variable. Must be unique. value: An expr expression. This expression is evaluated without access to any other variables. Multiple variables can be specified by using the flag multiple times.\nExamples\nsrotas run --var timeout=30 --var api_version=\"v2\" config.yaml Note\nNo variable references: The expressions in --var do not have access to any static or dynamic variables.\nWarning\nIf a duplicate variable name is detected, Srotas will return an error.\nFor more details, refer variables.","usage#Usage":"Use the run command to execute a configuration file:\nsrotas run [CONFIG] config: The path to the yaml configuration file.\nFor more details on configuring Srotas, check out the Configuration.\nFor a complete list of available flags and usage details, run:\nsrotas run --help Example srotas run config.yaml "},"title":"Running a Configuration"}}